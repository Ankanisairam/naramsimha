{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ddbfbb8-c8f0-4b75-9e74-e1b5fdb2c2f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available drives: ['C:\\\\', 'D:\\\\', 'G:\\\\']\n"
     ]
    }
   ],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import os\n",
    "from string import ascii_uppercase\n",
    "\n",
    "available_drives = [f\"{d}:\\\\\" for d in ascii_uppercase if os.path.exists(f\"{d}:\\\\\")]\n",
    "print(\"Available drives:\", available_drives)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b79b0e-4fb1-43c1-b866-f5afa1f4e205",
   "metadata": {},
   "source": [
    "# Data Facts and import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0b2389b7-0e82-48f0-a21d-fdb270f6e6e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "Reviewdata = pd.read_csv(r\"C:\\Users\\A.SAIRAM\\Downloads\\hotel-reviews.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d820b762-8634-4dca-adfc-c6ffeb47c0ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38932, 5)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Reviewdata .shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4cc8539-475b-460a-95ed-14fb80d1d388",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Description</th>\n",
       "      <th>Browser_Used</th>\n",
       "      <th>Device_Used</th>\n",
       "      <th>Is_Response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>id10326</td>\n",
       "      <td>The room was kind of clean but had a VERY stro...</td>\n",
       "      <td>Edge</td>\n",
       "      <td>Mobile</td>\n",
       "      <td>not happy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>id10327</td>\n",
       "      <td>I stayed at the Crown Plaza April -- - April -...</td>\n",
       "      <td>Internet Explorer</td>\n",
       "      <td>Mobile</td>\n",
       "      <td>not happy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>id10328</td>\n",
       "      <td>I booked this hotel through Hotwire at the low...</td>\n",
       "      <td>Mozilla</td>\n",
       "      <td>Tablet</td>\n",
       "      <td>not happy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>id10329</td>\n",
       "      <td>Stayed here with husband and sons on the way t...</td>\n",
       "      <td>InternetExplorer</td>\n",
       "      <td>Desktop</td>\n",
       "      <td>happy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>id10330</td>\n",
       "      <td>My girlfriends and I stayed here to celebrate ...</td>\n",
       "      <td>Edge</td>\n",
       "      <td>Tablet</td>\n",
       "      <td>not happy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID                                        Description  \\\n",
       "0  id10326  The room was kind of clean but had a VERY stro...   \n",
       "1  id10327  I stayed at the Crown Plaza April -- - April -...   \n",
       "2  id10328  I booked this hotel through Hotwire at the low...   \n",
       "3  id10329  Stayed here with husband and sons on the way t...   \n",
       "4  id10330  My girlfriends and I stayed here to celebrate ...   \n",
       "\n",
       "        Browser_Used Device_Used Is_Response  \n",
       "0               Edge      Mobile   not happy  \n",
       "1  Internet Explorer      Mobile   not happy  \n",
       "2            Mozilla      Tablet   not happy  \n",
       "3   InternetExplorer     Desktop       happy  \n",
       "4               Edge      Tablet   not happy  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Reviewdata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b3116f07-e62f-430c-9511-983e6f9c62ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 38932 entries, 0 to 38931\n",
      "Data columns (total 5 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   User_ID       38932 non-null  object\n",
      " 1   Description   38932 non-null  object\n",
      " 2   Browser_Used  38932 non-null  object\n",
      " 3   Device_Used   38932 non-null  object\n",
      " 4   Is_Response   38932 non-null  object\n",
      "dtypes: object(5)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "Reviewdata.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c11bd0e5-f31f-43e6-990f-a067cba5104e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>User_ID</th>\n",
       "      <td>38932</td>\n",
       "      <td>38932</td>\n",
       "      <td>id10326</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Description</th>\n",
       "      <td>38932</td>\n",
       "      <td>38932</td>\n",
       "      <td>The room was kind of clean but had a VERY stro...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Browser_Used</th>\n",
       "      <td>38932</td>\n",
       "      <td>11</td>\n",
       "      <td>Firefox</td>\n",
       "      <td>7367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Device_Used</th>\n",
       "      <td>38932</td>\n",
       "      <td>3</td>\n",
       "      <td>Desktop</td>\n",
       "      <td>15026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_Response</th>\n",
       "      <td>38932</td>\n",
       "      <td>2</td>\n",
       "      <td>happy</td>\n",
       "      <td>26521</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              count unique                                                top  \\\n",
       "User_ID       38932  38932                                            id10326   \n",
       "Description   38932  38932  The room was kind of clean but had a VERY stro...   \n",
       "Browser_Used  38932     11                                            Firefox   \n",
       "Device_Used   38932      3                                            Desktop   \n",
       "Is_Response   38932      2                                              happy   \n",
       "\n",
       "               freq  \n",
       "User_ID           1  \n",
       "Description       1  \n",
       "Browser_Used   7367  \n",
       "Device_Used   15026  \n",
       "Is_Response   26521  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Reviewdata.describe().transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75fe0ab8-eb15-4f71-a576-0ca8b725b7c3",
   "metadata": {},
   "source": [
    "# Data Cleaning /EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "64ae2f53-4e84-429f-9d8c-4305d7c619e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count and Percentage of missing values for the columns:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Count</th>\n",
       "      <th>Percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>User_ID</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Description</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Browser_Used</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Device_Used</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Is_Response</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Count  Percentage\n",
       "User_ID           0         0.0\n",
       "Description       0         0.0\n",
       "Browser_Used      0         0.0\n",
       "Device_Used       0         0.0\n",
       "Is_Response       0         0.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### checking missing values in the data set and printing the percentage for missing values values for Each columns ###\n",
    "\n",
    "count =Reviewdata.isnull().sum().sort_values(ascending=False)\n",
    "percentage= ((Reviewdata.isnull().sum()/len(Reviewdata)*100)).sort_values(ascending=False)\n",
    "missing_data=pd.concat([count,percentage],axis=1,\n",
    "keys=['Count','Percentage'])\n",
    "\n",
    "print('Count and Percentage of missing values for the columns:')\n",
    "missing_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9e57f0f1-5376-492d-987f-7144675545dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage for default/n\n",
      "Is_Response\n",
      "happy        68.12\n",
      "not happy    31.88\n",
      "Name: proportion, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAH9CAYAAAC6OR7FAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABBWElEQVR4nO3deVxU9f7H8feIMIACrmyKiEquuJSmUYYbmluabaZ53X+m5lJ2LfOWYIVm5bWbu/fm0nWp7nVLTcWNvKmFmpVredOkFLFUIDVU/P7+8MFcRzAdxDOgr+fjcR4P53u+55zPnBlm3n7PMjZjjBEAAIBFirm7AAAAcGchfAAAAEsRPgAAgKUIHwAAwFKEDwAAYCnCBwAAsBThAwAAWIrwAQAALEX4AAAAliJ83MbmzJkjm83mmIoXL66KFSuqd+/e+vnnn91d3k3bu3ev4uLidPjwYXeXcl1Xvxbe3t4KDg5W8+bNNW7cOKWlpeVaJi4uTjabzaXtnD17VnFxcdq0aZNLy+W1rcqVK6tDhw4ured6FixYoEmTJuU5z2azKS4urkC3V1CaNWumOnXquLuMArNp0ybZbDaX3ycFbcuWLYqLi9Pp06fdWgesR/i4A8yePVtbt25VYmKi+vfvr4ULF6pp06Y6c+aMu0u7KXv37lV8fHyRCB85rnwtpkyZovr16+vNN99UzZo1tW7dOqe+/fr109atW11a/9mzZxUfH+/yl0p+tpUffxQ+tm7dqn79+t3yGiDdfffd2rp1q+6++2631rFlyxbFx8cTPu5Axd1dAG69OnXqqGHDhpKk5s2bKzs7W6+99pqWLl2q7t2739S6z549K19f34Io845w5WshSY8++qiee+45PfDAA+rSpYu+//57BQUFSZIqVqyoihUr3tJ6cl4/K7Z1PU2aNHHr9gsjY4x+//13+fj4FOh6/f392d9wK0Y+7kA5Hzo//vijpMsfcFOnTlX9+vXl4+Oj0qVL67HHHtMPP/zgtFzO0PNnn32m6Oho+fr6qk+fPpKk06dPa8SIEapSpYrsdrsCAwPVrl077d+/37H8+fPn9frrr6tGjRqy2+0qX768evfurRMnTjhtJ2e4f/Xq1br77rvl4+OjGjVq6P3333f0mTNnjh5//HFJlwNVzuGMOXPmSJISExPVqVMnVaxYUd7e3qpWrZoGDBigX375Jdf+WLZsmerWrSu73a4qVaro3XffzfMwxI3uJ1dVqlRJ77zzjjIzMzVjxgxHe141bNiwQc2aNVPZsmXl4+OjSpUq6dFHH9XZs2d1+PBhlS9fXpIUHx/v2Ce9evVyWt/OnTv12GOPqXTp0qpateo1t5VjyZIlqlu3rry9vVWlShX97W9/c5qfc0jp6hGoq4f2mzVrppUrV+rHH390OgSVI6/DLrt371anTp1UunRpeXt7q379+po7d26e21m4cKFGjx6t0NBQ+fv7q1WrVjpw4IBT36+++kodOnRQYGCg7Ha7QkND1b59e/300095Pverbd68WU2aNJGPj48qVKigV155RdnZ2ZIuvz8iIyPVpk2bXMv99ttvCggI0ODBg/9w/TabTc8++6ymT5+umjVrym63O57v999/r27dujlqr1mzpqZMmeJY9sSJE/Ly8tIrr7ySa7379++XzWZzvHbXOuyyfft2PfzwwypTpoy8vb3VoEEDffTRR475GRkZKl68uN566y1H2y+//KJixYopICBAFy9edLQPHTpU5cuX17V+uzQuLk5//vOfJUkRERGO98OmTZvUt29flSlTRmfPns21XIsWLVS7du1c+2zGjBm66667ZLfbVatWLS1atCjXsqmpqRowYIAqVqwoLy8vRUREKD4+3qluWMTgtjV79mwjySQnJzu1v/vuu0aSmTlzpjHGmP79+xtPT08zYsQIs3r1arNgwQJTo0YNExQUZFJTUx3LxcTEmDJlypiwsDDz3nvvmY0bN5qkpCSTkZFhateubUqUKGHGjh1r1qxZY/7973+bYcOGmQ0bNhhjjMnOzjYPPfSQKVGihImPjzeJiYnm73//u6lQoYKpVauWOXv2rGM74eHhpmLFiqZWrVpm3rx5Zs2aNebxxx83kkxSUpIxxpi0tDSTkJBgJJkpU6aYrVu3mq1bt5q0tDRjjDHTpk0z48aNM8uXLzdJSUlm7ty5pl69eqZ69erm/Pnzjm19+umnplixYqZZs2ZmyZIl5uOPPzaNGzc2lStXNlf/edzofnLltcjx22+/GQ8PD9OyZUtH25gxY5xqOHTokPH29jaxsbFm6dKlZtOmTWb+/PmmR48e5tSpU+b33383q1evNpJM3759Hfvk4MGDTusLDw83L774oklMTDRLly7Nc1s5r0OFChVMpUqVzPvvv29WrVplunfv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X3/9tRISEq5bU6tWrTRq1Cj5+fk5Dq2UKFFCTZo00XvvvaejR4/e0CGX671f+/Xrp7i4OHXv3l0HDhzQm2++mWe/9evX6/jx447RqezsbH344YeqWrWqY1S2Q4cOWrVqlapWrep0WAvuQfi4w91///36v//7P/Xu3Vvbt2/Xgw8+qBIlSujYsWP6z3/+o6ioKA0cOPAP1zF8+HB9+OGH6tSpk1566SXde++9OnfunJKSktShQwc1b95cXbt21fz589WuXTsNGzZM9957rzw9PfXTTz9p48aN6tSpkx555BGXas+54+TMmTPl5+cnb29vRUREqEaNGqpatapeeuklGWNUpkwZffLJJ47j0VcaO3as2rdvrzZt2mjYsGHKzs7WW2+9pZIlS+rkyZMFup+ky6MyOcea09LStHnzZs2ePVseHh5asmSJ41LZvEyfPl0bNmxQ+/btValSJf3++++Oy49zPuj9/PwUHh6uZcuWqWXLlipTpozKlSvnCAiuCg0N1cMPP6y4uDiFhITon//8pxITE/Xmm2867u/SqFEjVa9eXS+88IIuXryo0qVLa8mSJfrPf/6Ta31RUVFavHixpk2bpnvuuUfFihW75qjcmDFjHMfpX331VZUpU0bz58/XypUrNWHCBAUEBLj0XFasWKGpU6eqc+fOqlKliowxWrx4sU6fPq3Y2NjrLl+2bFkNHDhQR44c0V133aVVq1Zp1qxZGjhwoNP5SZIUGxurWrVqaePGjXr66acVGBjoUq1Xe/fdd/XAAw+oadOmGjhwoCpXrqzMzEwdPHhQn3zyiTZs2ODUv0+fPhowYICOHj2q6OjoPEcLrjZjxgy1bdtWbdq0Ua9evVShQgWdPHlS+/bt086dO/Xxxx87+rZs2VLZ2dlav36906XPrVq10pgxY2Sz2a75H5ErRUVFOZ5fz5495enpqerVqztGQkuVKqU//elPmjZtmsLDw3Odi5WjXLlyatGihV555RWVKFFCU6dO1f79+50utx07dqwSExMVHR2toUOHqnr16vr99991+PBhrVq1StOnT3f7vW7uKG482RW32I1cYZHj/fffN40bNzYlSpQwPj4+pmrVquZPf/qT2b59u6NPTEyMqV27dp7Lnzp1ygwbNsxUqlTJeHp6msDAQNO+fXuzf/9+R58LFy6Yt99+29SrV894e3ubkiVLmho1apgBAwaY77//3tEvPDzctG/fPtc2YmJiTExMjFPbpEmTTEREhPHw8HC6JHDv3r0mNjbW+Pn5mdKlS5vHH3/cHDlyJM8rQZYsWWKioqKMl5eXqVSpkhk/frwZOnSoKV26dL72U15yXoucycvLywQGBpqYmBiTkJDguET4SldfgbJ161bzyCOPmPDwcGO3203ZsmVNTEyMWb58udNy69atMw0aNDB2u91IMj179nRa34kTJ667LWP+9zr861//MrVr1zZeXl6mcuXKZuLEibmW/+6770zr1q2Nv7+/KV++vBkyZIhZuXJlrisqTp48aR577DFTqlQpY7PZnLaZ12vz7bffmo4dO5qAgADj5eVl6tWr53TZpzH/u3Ljyssqjbl8afKV74n9+/ebp556ylStWtX4+PiYgIAAc++995o5c+bkej5Xy3nvb9q0yTRs2NDY7XYTEhJiXn755VxXh+SIi4tzXG12o3TVpbtXP58+ffqYChUqGE9PT1O+fHkTHR1tXn/99Vx909PTjY+PT56XqxqT99Uuxhjz9ddfmyeeeMIEBgYaT09PExwcbFq0aGGmT5/u1O/SpUumXLlyRpL5+eefHe2ff/65kWTuvvvuG37Oo0aNMqGhoaZYsWJ51rRp0yYjyYwfPz7P5XP22dSpU03VqlWNp6enqVGjhpk/f36uvidOnDBDhw41ERERxtPT05QpU8bcc889ZvTo0ea333674Zpx82zGXOcUe+AOc+HCBdWvX18VKlTQ2rVr3V0OiqiGDRvKZrMpOTnZ3aUUaSNGjNC0adOUkpKS54noNptNgwcP1uTJk91QHfKLwy644/Xt21exsbEKCQlRamqqpk+frn379rl8FQmQkZGh3bt3a8WKFdqxY4eWLFni7pKKrG3btum7777T1KlTNWDAgDyDB4ouwgfueJmZmXrhhRd04sQJeXp66u6779aqVatu6h4FuDPt3LlTzZs3V9myZTVmzBh17tzZ3SUVWffdd598fX3VoUMHvf766+4uBwWMwy4AAMBS3GQMAABYivABAAAsRfgAAACWKnQnnF66dElHjx6Vn5+fS7eBBgAA7mOMUWZmpkJDQ1Ws2B+PbRS68HH06NFcv2IJAACKhpSUlOveLbbQhY+c2+qmpKTI39/fzdUAAIAbkZGRobCwsBv6odBCFz5yDrX4+/sTPgAAKGJu5JQJ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3xiTq+1Ko0aNUnp6umNKSUlxtSQAAFCEuPzbLl5eXqpWrZokqWHDhkpOTta7776rF198UZKUmpqqkJAQR/+0tLRcoyFXstvtstvtrpYBAACKqJu+z4cxRllZWYqIiFBwcLASExMd886fP6+kpCRFR0ff7GYAAMBtwqWRj5dffllt27ZVWFiYMjMztWjRIm3atEmrV6+WzWbT8OHDlZCQoMjISEVGRiohIUG+vr7q1q3braofAAAUMS6Fj+PHj6tHjx46duyYAgICVLduXa1evVqxsbGSpJEjR+rcuXMaNGiQTp06pcaNG2vt2rXy8/O7JcUDAICix6Xw8Y9//OMP59tsNsXFxSkuLu5magIAALcxftsFAABYivABAAAsRfgAAACWInwAAABLET4AAIClCB8AAMBShA8AAGApwgcAALAU4QMAAFiK8AEAACxF+AAAAJYifAAAAEsRPgAAgKUIHwAAwFKEDwAAYCnCBwAAsBThAwAAWIrwAQAALEX4AAAAliJ8AAAASxE+AACApQgfAADAUoQPAABgKcIHAACwFOEDAABYivABAAAsRfgAAACWInwAAABLET4AAIClCB8AAMBShA8AAGApwgcAALAU4QMAAFiK8AEAACxF+AAAAJYifAAAAEsRPgAAgKUIHwAAwFKEDwAAYCnCBwAAsBThAwAAWMql8DFu3Dg1atRIfn5+CgwMVOfOnXXgwAGnPsYYxcXFKTQ0VD4+PmrWrJn27NlToEUDAICiy6XwkZSUpMGDB2vbtm1KTEzUxYsX1bp1a505c8bRZ8KECZo4caImT56s5ORkBQcHKzY2VpmZmQVePAAAKHqKu9J59erVTo9nz56twMBA7dixQw8++KCMMZo0aZJGjx6tLl26SJLmzp2roKAgLViwQAMGDCi4ygEAQJF0U+d8pKenS5LKlCkjSTp06JBSU1PVunVrRx+73a6YmBht2bIlz3VkZWUpIyPDaQIAALevfIcPY4yef/55PfDAA6pTp44kKTU1VZIUFBTk1DcoKMgx72rjxo1TQECAYwoLC8tvSQAAoAjId/h49tln9c0332jhwoW55tlsNqfHxphcbTlGjRql9PR0x5SSkpLfkgAAQBHg0jkfOYYMGaLly5frs88+U8WKFR3twcHBki6PgISEhDja09LSco2G5LDb7bLb7fkpAwAAFEEujXwYY/Ts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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "print('Percentage for default/n')\n",
    "print(round(Reviewdata.Is_Response.value_counts(normalize=True)*100,2))\n",
    "round(Reviewdata.Is_Response.value_counts(normalize=True)*100,2).plot(kind='bar')\n",
    "plt.title('Percentage Distributions by review type')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "25084ee6-9b38-446a-a3b9-a0620ffda1b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing columns\n",
    "Reviewdata.drop(columns= ['User_ID','Browser_Used','Device_Used'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f6b518eb-2dc3-4287-9abc-b6c4c2a4cecc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply first level cleaning\n",
    "import re\n",
    "import string\n",
    "# This function converts to lower-case,removes square bracket, remove numbers and punctuation\n",
    "def text_clean_1(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub('\\[.*?\\]','',text)\n",
    "    text = re.sub('[%s]'%re.escape(string.punctuation),'',text)\n",
    "    text = re.sub('\\w*\\d\\w*','',text)\n",
    "    return text\n",
    "\n",
    "cleaned1 = lambda x: text_clean_1(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d0c4cc65-366f-4e0f-9520-1119796e06c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Description</th>\n",
       "      <th>Is_Response</th>\n",
       "      <th>cleaned_descriptior</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The room was kind of clean but had a VERY stro...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>the room was kind of clean but had a very stro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>I stayed at the Crown Plaza April -- - April -...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>i stayed at the crown plaza april   april   th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I booked this hotel through Hotwire at the low...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>i booked this hotel through hotwire at the low...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Stayed here with husband and sons on the way t...</td>\n",
       "      <td>happy</td>\n",
       "      <td>stayed here with husband and sons on the way t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>My girlfriends and I stayed here to celebrate ...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>my girlfriends and i stayed here to celebrate ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>We had - rooms. One was very nice and clearly ...</td>\n",
       "      <td>happy</td>\n",
       "      <td>we had  rooms one was very nice and clearly ha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>My husband and I have stayed in this hotel a f...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>my husband and i have stayed in this hotel a f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>My wife &amp; I stayed in this glorious city a whi...</td>\n",
       "      <td>happy</td>\n",
       "      <td>my wife  i stayed in this glorious city a whil...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>My boyfriend and I stayed at the Fairmont on a...</td>\n",
       "      <td>happy</td>\n",
       "      <td>my boyfriend and i stayed at the fairmont on a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Wonderful staff, great location, but it was de...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>wonderful staff great location but it was defi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Description Is_Response  \\\n",
       "0  The room was kind of clean but had a VERY stro...   not happy   \n",
       "1  I stayed at the Crown Plaza April -- - April -...   not happy   \n",
       "2  I booked this hotel through Hotwire at the low...   not happy   \n",
       "3  Stayed here with husband and sons on the way t...       happy   \n",
       "4  My girlfriends and I stayed here to celebrate ...   not happy   \n",
       "5  We had - rooms. One was very nice and clearly ...       happy   \n",
       "6  My husband and I have stayed in this hotel a f...   not happy   \n",
       "7  My wife & I stayed in this glorious city a whi...       happy   \n",
       "8  My boyfriend and I stayed at the Fairmont on a...       happy   \n",
       "9  Wonderful staff, great location, but it was de...   not happy   \n",
       "\n",
       "                                 cleaned_descriptior  \n",
       "0  the room was kind of clean but had a very stro...  \n",
       "1  i stayed at the crown plaza april   april   th...  \n",
       "2  i booked this hotel through hotwire at the low...  \n",
       "3  stayed here with husband and sons on the way t...  \n",
       "4  my girlfriends and i stayed here to celebrate ...  \n",
       "5  we had  rooms one was very nice and clearly ha...  \n",
       "6  my husband and i have stayed in this hotel a f...  \n",
       "7  my wife  i stayed in this glorious city a whil...  \n",
       "8  my boyfriend and i stayed at the fairmont on a...  \n",
       "9  wonderful staff great location but it was defi...  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's take a look at the updated text\n",
    "Reviewdata['cleaned_descriptior']=pd.DataFrame(Reviewdata.Description.apply(cleaned1))\n",
    "Reviewdata.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "efe03b7d-88ea-4ecd-95fb-93ebfaebd25d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply a second round of clearning\n",
    "def text_clean_2(text):\n",
    "    text = re.sub('[''\"\",,,,]','',text)\n",
    "    text = re.sub('\\n','',text)\n",
    "    return text\n",
    "\n",
    "cleaned2 = lambda x:text_clean_2 (x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ff5ae29-5520-45db-8dd6-919f7f4d2c68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Description</th>\n",
       "      <th>Is_Response</th>\n",
       "      <th>cleaned_descriptior</th>\n",
       "      <th>cleaned_descripation_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The room was kind of clean but had a VERY stro...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>the room was kind of clean but had a very stro...</td>\n",
       "      <td>the room was kind of clean but had a very stro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>I stayed at the Crown Plaza April -- - April -...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>i stayed at the crown plaza april   april   th...</td>\n",
       "      <td>i stayed at the crown plaza april   april   th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>I booked this hotel through Hotwire at the low...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>i booked this hotel through hotwire at the low...</td>\n",
       "      <td>i booked this hotel through hotwire at the low...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Stayed here with husband and sons on the way t...</td>\n",
       "      <td>happy</td>\n",
       "      <td>stayed here with husband and sons on the way t...</td>\n",
       "      <td>stayed here with husband and sons on the way t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>My girlfriends and I stayed here to celebrate ...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>my girlfriends and i stayed here to celebrate ...</td>\n",
       "      <td>my girlfriends and i stayed here to celebrate ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>We had - rooms. One was very nice and clearly ...</td>\n",
       "      <td>happy</td>\n",
       "      <td>we had  rooms one was very nice and clearly ha...</td>\n",
       "      <td>we had  rooms one was very nice and clearly ha...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>My husband and I have stayed in this hotel a f...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>my husband and i have stayed in this hotel a f...</td>\n",
       "      <td>my husband and i have stayed in this hotel a f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>My wife &amp; I stayed in this glorious city a whi...</td>\n",
       "      <td>happy</td>\n",
       "      <td>my wife  i stayed in this glorious city a whil...</td>\n",
       "      <td>my wife  i stayed in this glorious city a whil...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>My boyfriend and I stayed at the Fairmont on a...</td>\n",
       "      <td>happy</td>\n",
       "      <td>my boyfriend and i stayed at the fairmont on a...</td>\n",
       "      <td>my boyfriend and i stayed at the fairmont on a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Wonderful staff, great location, but it was de...</td>\n",
       "      <td>not happy</td>\n",
       "      <td>wonderful staff great location but it was defi...</td>\n",
       "      <td>wonderful staff great location but it was defi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Description Is_Response  \\\n",
       "0  The room was kind of clean but had a VERY stro...   not happy   \n",
       "1  I stayed at the Crown Plaza April -- - April -...   not happy   \n",
       "2  I booked this hotel through Hotwire at the low...   not happy   \n",
       "3  Stayed here with husband and sons on the way t...       happy   \n",
       "4  My girlfriends and I stayed here to celebrate ...   not happy   \n",
       "5  We had - rooms. One was very nice and clearly ...       happy   \n",
       "6  My husband and I have stayed in this hotel a f...   not happy   \n",
       "7  My wife & I stayed in this glorious city a whi...       happy   \n",
       "8  My boyfriend and I stayed at the Fairmont on a...       happy   \n",
       "9  Wonderful staff, great location, but it was de...   not happy   \n",
       "\n",
       "                                 cleaned_descriptior  \\\n",
       "0  the room was kind of clean but had a very stro...   \n",
       "1  i stayed at the crown plaza april   april   th...   \n",
       "2  i booked this hotel through hotwire at the low...   \n",
       "3  stayed here with husband and sons on the way t...   \n",
       "4  my girlfriends and i stayed here to celebrate ...   \n",
       "5  we had  rooms one was very nice and clearly ha...   \n",
       "6  my husband and i have stayed in this hotel a f...   \n",
       "7  my wife  i stayed in this glorious city a whil...   \n",
       "8  my boyfriend and i stayed at the fairmont on a...   \n",
       "9  wonderful staff great location but it was defi...   \n",
       "\n",
       "                            cleaned_descripation_new  \n",
       "0  the room was kind of clean but had a very stro...  \n",
       "1  i stayed at the crown plaza april   april   th...  \n",
       "2  i booked this hotel through hotwire at the low...  \n",
       "3  stayed here with husband and sons on the way t...  \n",
       "4  my girlfriends and i stayed here to celebrate ...  \n",
       "5  we had  rooms one was very nice and clearly ha...  \n",
       "6  my husband and i have stayed in this hotel a f...  \n",
       "7  my wife  i stayed in this glorious city a whil...  \n",
       "8  my boyfriend and i stayed at the fairmont on a...  \n",
       "9  wonderful staff great location but it was defi...  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# let's take a look at the updated text\n",
    "Reviewdata['cleaned_descripation_new'] = pd.DataFrame(Reviewdata['cleaned_descriptior'].apply(cleaned2))\n",
    "Reviewdata.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "671f1e36-7c74-44a3-b919-4ce18f2117a6",
   "metadata": {},
   "source": [
    "# Model training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "25616af9-64a3-4035-bab5-1117046c2354",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IV_train : 35038\n",
      "IV_test : 3894\n",
      "DV_train: 35038\n",
      "DV_test: 3894\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "Independent_var = Reviewdata.cleaned_descripation_new\n",
    "Dependent_var = Reviewdata.Is_Response\n",
    "\n",
    "IV_train,IV_test,DV_train,DV_test=train_test_split(Independent_var,Dependent_var,test_size = 0.1,random_state = 225)\n",
    "print('IV_train :',len(IV_train))\n",
    "print('IV_test :',len(IV_test))\n",
    "print ('DV_train:',len(DV_train))\n",
    "print('DV_test:', len(DV_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3349684-5a97-467f-b72b-b0449c2f611d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "27fa5983-dc7b-4cc1-98a7-0f52a1a08661",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "tvec = TfidfVectorizer()\n",
    "clf2 = LogisticRegression(solver = 'lbfgs')\n",
    "\n",
    "from sklearn.pipeline import Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "884bade8-fc17-42bd-ae14-563a8df01a76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;vectorizer&#x27;, TfidfVectorizer()),\n",
       "                (&#x27;classifier&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;vectorizer&#x27;, TfidfVectorizer()),\n",
       "                (&#x27;classifier&#x27;, LogisticRegression())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;TfidfVectorizer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html\">?<span>Documentation for TfidfVectorizer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>TfidfVectorizer()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('vectorizer', TfidfVectorizer()),\n",
       "                ('classifier', LogisticRegression())])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Pipeline([('vectorizer',tvec),('classifier',clf2)])\n",
    "model.fit(IV_train,DV_train)\n",
    "                  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "063c33c7-6e52-444f-a14e-7c01c23b8390",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2418,  298],\n",
       "       [ 153, 1025]], dtype=int64)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "prdict= model.predict(IV_test)\n",
    "confusion_matrix(prdict,DV_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c4a1c95-907e-4b77-b7a7-0af374633336",
   "metadata": {},
   "source": [
    "# model prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "789c0087-e4a5-48a6-b9f3-96061ee01678",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy : 0.884180790960452\n",
      "Precision : 0.8903522551738874\n",
      "Recall : 0.884180790960452\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score,precision_score,recall_score\n",
    "\n",
    "print('Accuracy :',accuracy_score(prdict,DV_test))\n",
    "print('Precision :',precision_score(prdict,DV_test,average = 'weighted'))\n",
    "print('Recall :',recall_score(prdict,DV_test,average = 'weighted'))\n",
    "\n",
    "      "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "468eb15b-55df-4887-9c43-781abccdb383",
   "metadata": {},
   "source": [
    "# Trying on new reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "73dfcc55-e4c4-4e94-b17a-aef73ad1a3c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['happy']\n"
     ]
    }
   ],
   "source": [
    "example = [\"I'm satisfied\"]\n",
    "result = model.predict(example)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3636228-e66d-4955-ac2e-330571fa2ee6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
