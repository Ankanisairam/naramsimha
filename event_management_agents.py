# -*- coding: utf-8 -*-
"""Event management agents

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UN0MKrYB6GdKC-3swfi92QRk99xDAkWY
"""

!pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_community==0.0.29

!pip install python-docx

!pip install groq

!pip install crewai_tools

!pip install openai==0.28

!pip install --upgrade openai crewai embedchain crewai_tools

# Warning control
import warnings
warnings.filterwarnings('ignore')

from crewai import Agent, Task, Crew, Process
import os
from crewai_tools import ScrapeWebsiteTool, SerperDevTool
# from langchain.tools import SerperDevTool
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from docx import Document
from io import BytesIO
import base64
from groq import Groq
import openai
import logging

from dotenv import load_dotenv
import os

load_dotenv()  # Load environment variables from .env
# ðŸ”§ Suppress OpenTelemetry warning
logging.getLogger("opentelemetry.trace").setLevel(logging.ERROR)

os.environ["OPENAI_API_KEY"] = "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"

os.environ["SERPER_API_KEY"] = "d69fcc679a5e5072721b2add10c22348ffcc5365"
# Set up Groq API key
GROQ_API_KEY = "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"
# # Set OpenAI-compatible API base for Groq
# openai.api_base = "https://api.groq.com"

# Initialize Groq client
groq_client = Groq(api_key=GROQ_API_KEY)

from crewai_tools import ScrapeWebsiteTool, SerperDevTool

# Initialize the tools
search_tool = SerperDevTool()
scrape_tool = ScrapeWebsiteTool()

# âœ… Define LLM using LangChain's OpenAI-compatible API
llm = ChatOpenAI(
    model="mixtral-8x7b-32768",  # Use Groq's Mixtral model
    openai_api_key=GROQ_API_KEY,
    openai_api_base="https://api.groq.com/openai/v1"
)

# # from langchain.tools import Tool
# # import requests
# # # âœ… Define a proper search function for CrewAI
# # def search_internet(query: str):
# #     """Uses the Serper API to search for a given query."""
# #     api_key = "your_serper_api_key"  # Replace with your Serper API key
# #     headers = {"X-API-KEY": api_key}
# #     params = {"q": query}
# #     response = requests.get("https://google.serper.dev/search", headers=headers, params=params)
# #     # return response.json() if response.status_code == 200 else f"Error: {response.text}"
import requests

api_key = "d69fcc679a5e5072721b2add10c22348ffcc5365"
url = "https://google.serper.dev/search"
headers = {"X-API-KEY": api_key}
params = {"q": "tech venues in San Francisco"}

response = requests.get(url, headers=headers, params=params)
print(response.json())  # Should return valid search results

# # âœ… Create a Tool for CrewAI
# search_tool = Tool(
#     name="Search the internet",
#     func=search_internet,
#     description="Search the internet for relevant information based on a query."
# )

# Agent 1: Venue Coordinator
venue_coordinator = Agent(
    role="Venue Coordinator",
    goal="Identify and book an appropriate venue "
    "based on event requirements",
    tools=[search_tool, scrape_tool],
    verbose=True,
    backstory=(
        "With a keen sense of space and "
        "understanding of event logistics, "
        "you excel at finding and securing "
        "the perfect venue that fits the event's theme, "
        "size, and budget constraints."
    ),
    llm=llm
)

# Agent 2: Logistics Manager
logistics_manager = Agent(
    role='Logistics Manager',
    goal=(
        "Manage all logistics for the event "
        "including catering and equipmen"
    ),
    tools=[search_tool, scrape_tool],
    verbose=True,
    backstory=(
        "Organized and detail-oriented, "
        "you ensure that every logistical aspect of the event "
        "from catering to equipment setup "
        "is flawlessly executed to create a seamless experience."
    ),
    llm=llm
)

# Agent 3: Marketing and Communications Agent
marketing_communications_agent = Agent(
    role="Marketing and Communications Agent",
    goal="Effectively market the event and "
         "communicate with participants",
    tools=[search_tool, scrape_tool],
    verbose=True,
    backstory=(
        "Creative and communicative, "
        "you craft compelling messages and "
        "engage with potential attendees "
        "to maximize event exposure and participation."
    ),
    llm=llm
)

from pydantic import BaseModel
# Define a Pydantic model for venue details
# (demonstrating Output as Pydantic)
class VenueDetails(BaseModel):
    name: str
    address: str
    capacity: int
    booking_status: str

venue_task = Task(
    description="Find a venue in {event_city} "
                "that meets criteria for {event_topic}.",
    expected_output="All the details of a specifically chosen"
                    "venue you found to accommodate the event.",
    human_input=True,
    output_json=VenueDetails,
    output_file="venue_details.json",
      # Outputs the venue details as a JSON file
    agent=venue_coordinator
)

logistics_task = Task(
    description="Coordinate catering and "
                 "equipment for an event "
                 "with {expected_participants} participants "
                 "on {tentative_date}.",
    expected_output="Confirmation of all logistics arrangements "
                    "including catering and equipment setup.",
    human_input=True,
    async_execution=True,
    agent=logistics_manager
)

marketing_task = Task(
    description="Promote the {event_topic} "
                "aiming to engage at least"
                "{expected_participants} potential attendees.",
    expected_output="Report on marketing activities "
                    "and attendee engagement formatted as markdown.",
    async_execution=True,
    output_file="marketing_report.md",  # Outputs the report as a text file
    agent=marketing_communications_agent
)

# Define the crew with agents and tasks
event_management_crew = Crew(
    agents=[venue_coordinator,
            logistics_manager,
            marketing_communications_agent],

    tasks=[venue_task,
           logistics_task,
           marketing_task],

    verbose=True

event_details = {
    'event_topic': "Tech Innovation Conference",
    'event_description': "A gathering of tech innovators "
                         "and industry leaders "
                         "to explore future technologies.",
    'event_city': "San Francisco",
    'tentative_date': "2024-09-15",
    'expected_participants': 500,
    'budget': 20000,
    'venue_type': "Conference Hall"
}

result = event_management_crew.kickoff(inputs=event_details)

